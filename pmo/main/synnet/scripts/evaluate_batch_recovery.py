"""
This function evaluates a batch of predictions by computing the (1) novelty, (2) validity,
(3) uniqueness, (4) Fr√©chet ChemNet distance, and (5) KL divergence for the final
root molecules which correspond to *unrecovered* molecules in all the generated trees.
"""
from tdc import Evaluator
import pandas as pd
import glob
import numpy as np

kl_divergence = Evaluator(name = 'KL_Divergence')
fcd_distance = Evaluator(name = 'FCD_Distance')
novelty = Evaluator(name = 'Novelty')
validity = Evaluator(name = 'Validity')
uniqueness = Evaluator(name = 'Uniqueness')

if __name__ == '__main__':
    # load the final root molecules generated by a prediction run using a 
    # pre-trained model, which were all saved to different files
    generated_st_files = glob.glob('../../results_mp/pis_fp/decode_result_train*.csv.gz')

    # lists in which to collect all the results
    recovered_molecules      = pd.DataFrame({'query SMILES': [], 'decode SMILES': [], 'similarity':[]})  # molecules successfully recovered from query
    unrecovered_molecules    = pd.DataFrame({'query SMILES': [], 'decode SMILES': [], 'similarity':[]})  # unsuccessfully recovered
    recovered_novelty_all           = []
    recovered_validity_decode_all   = []
    recovered_uniqueness_decode_all = []
    recovered_fcd_distance_all      = []
    recovered_kl_divergence_all     = []
    unrecovered_novelty_all           = []
    unrecovered_validity_decode_all   = []
    unrecovered_uniqueness_decode_all = []
    unrecovered_fcd_distance_all      = []
    unrecovered_kl_divergence_all     = []

    similarity = []

    n_recovered = 0
    n_unrecovered = 0
    n_total = 0

    # load each file containing the predictions
    for generate_st_file in generated_st_files:

        print(f'File currently being evaluated: {generate_st_file}')

        result_df = pd.read_csv(generate_st_file, compression='gzip')
        n_total += len(result_df['decode SMILES'])

        # get the recovered and unrecovered molecules only (no NaNs)
        unrecovered_molecules = pd.concat([unrecovered_molecules, result_df[result_df['similarity'] != 1.0].dropna()])
        recovered_molecules   = pd.concat([recovered_molecules, result_df[result_df['similarity'] == 1.0].dropna()])

    n_recovered += len(recovered_molecules['decode SMILES'])
    n_unrecovered += len(unrecovered_molecules['decode SMILES'])
    similarity += unrecovered_molecules['similarity'].tolist()

    # compute the following properties, using the TDC, for the succesfully recovered molecules
    recovered_novelty_all = novelty(recovered_molecules['query SMILES'].tolist(), recovered_molecules['decode SMILES'].tolist())
    recovered_validity_decode_all = validity(recovered_molecules['decode SMILES'].tolist())
    recovered_uniqueness_decode_all = uniqueness(recovered_molecules['decode SMILES'].tolist())
    recovered_fcd_distance_all = fcd_distance(recovered_molecules['query SMILES'].tolist(), recovered_molecules['decode SMILES'].tolist())
    recovered_kl_divergence_all = kl_divergence(recovered_molecules['query SMILES'].tolist(), recovered_molecules['decode SMILES'].tolist())

    # compute the following properties, using the TDC, for the unrecovered molecules
    unrecovered_novelty_all = novelty(unrecovered_molecules['query SMILES'].tolist(), unrecovered_molecules['decode SMILES'].tolist())
    unrecovered_validity_decode_all = validity(unrecovered_molecules['decode SMILES'].tolist())
    unrecovered_uniqueness_decode_all = uniqueness(unrecovered_molecules['decode SMILES'].tolist())
    unrecovered_fcd_distance_all = fcd_distance(unrecovered_molecules['query SMILES'].tolist(), unrecovered_molecules['decode SMILES'].tolist())
    unrecovered_kl_divergence_all = kl_divergence(unrecovered_molecules['query SMILES'].tolist(), unrecovered_molecules['decode SMILES'].tolist())

    print('N recovered, N unrecovered, N total (% recovered):', n_recovered, ',', n_unrecovered, ',', n_total, ', (', 100*n_recovered/n_total, '%)')
    n_finished = n_recovered + n_unrecovered
    n_unfinished = n_total - n_finished
    print('N finished trees (%):', n_finished, '(', 100*n_finished/n_total,'%)')
    print('N unfinished trees (NaN) (%):', n_unfinished, '(', 100*n_unfinished/n_total,'%)')
    print('Average similarity (unrecovered only)', np.mean(similarity))

    print('Novelty, recovered:', recovered_novelty_all)
    print('Novelty, unrecovered:', unrecovered_novelty_all)

    print('Validity, decode molecules, recovered:', recovered_validity_decode_all)
    print('Validity, decode molecules, unrecovered:', unrecovered_validity_decode_all)

    print('Uniqueness, decode molecules, recovered:', recovered_uniqueness_decode_all)
    print('Uniqueness, decode molecules, unrecovered:', unrecovered_uniqueness_decode_all)

    print('FCD distance, recovered:', recovered_fcd_distance_all)
    print('FCD distance, unrecovered:', unrecovered_fcd_distance_all)

    print('KL divergence, recovered:', recovered_kl_divergence_all)
    print('KL divergence, unrecovered:', unrecovered_kl_divergence_all)
